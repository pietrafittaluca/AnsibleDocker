# Descrizione:
# - Questo playbook crea due VMs con CentOS e un container Docker

- name: Create two VMs (A and B)
  hosts: localhost
  connection: local
  vars:
    # vm_number: 4
    vm_name: myVM
    resource_group: myResourceGroup
    admin_username: testuser
    admin_password: Pass123$$$abx!
    location: eastus
  tasks:
  # 1 - Crea un gruppo di risorse
  - name: Create a resource group
    azure_rm_resourcegroup:
      name: "{{ resource_group }}"
      location: "{{ location }}"

  # 2 - Crea rete virtuale
  - name: Create virtual network
    azure_rm_virtualnetwork:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      address_prefixes: "10.0.0.0/16"

  - name: Create subnets for VM A and B
    azure_rm_subnet:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      address_prefix: "10.0.1.0/24"
      virtual_network: "{{ vm_name }}"

  # 3 - Creare un gruppo di sicurezza di rete
  - name: Create Network Security Group that allows SSH
    azure_rm_securitygroup:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}"
      rules:
        # Apro la porta 22 per SSH
        - name: SSH
          protocol: Tcp
          destination_port_range: 22
          access: Allow
          priority: 1001
          direction: Inbound

  # 4 - Creare una scheda di interfaccia di rete virtuale
  - name: Create public IP addresses for VM A and B
    azure_rm_publicipaddress:
      resource_group: "{{ resource_group }}"
      allocation_method: Static
      name: "{{ vm_name }}_{{ item }}"
    # loop: "{{ range(0, vm_number + 1, 1)|list }}"
    loop:
      - A
      - B
    register: pip_output

  # 5 - Creare una scheda di interfaccia di rete virtuale
  - name: Create virtual network inteface cards for VM A and B
    azure_rm_networkinterface:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}_{{ item }}"
      virtual_network: "{{ vm_name }}"
      subnet: "{{ vm_name }}"
      public_ip_name: "{{ vm_name }}_{{ item }}"
      security_group: "{{ vm_name }}"
    # loop: "{{ range(0, vm_number + 1, 1)|list }}"
    loop:
      - A
      - B

  # 6 - CREAZIONE DELLE VMs
  - name: Create VM A and B
    azure_rm_virtualmachine:
      resource_group: "{{ resource_group }}"
      name: "{{ vm_name }}{{ item }}"
      admin_username: "{{ admin_username }}"
      admin_password: "{{ admin_password }}"
      vm_size: Standard_B1ms
      network_interfaces: "{{ vm_name }}_{{ item }}"
      image:
        offer: CentOS
        publisher: OpenLogic
        sku: '7.5'
        version: latest
    # loop: "{{ range(0, vm_number + 1, 1)|list }}"
    loop:
      - A
      - B

######################################################################################

  # - name: Create VM Extension
  #   azure_rm_virtualmachine_extension:
  #     resource_group: "{{ resource_group }}"
  #     name: testVMExtension
  #     virtual_machine_name: "{{ vm_name }}{{ item }}"
  #     publisher: Microsoft.Azure.Extensions
  #     virtual_machine_extension_type: CustomScript
  #     type_handler_version: 2.0
  #     auto_upgrade_minor_version: true
  #     settings: {"commandToExecute": "sudo apt-get -y install apache2"}
  #   # loop: "{{ range(0, vm_number + 1, 1)|list }}"
  #   loop:
  #     - A
  #     - B

  # - name: Execute a command using the shell module
  #   become: true
  #   become_user: root
  #   shell: apt-get -y update && apt-get install -y python-yaml python-jinja2 git
  #   loop:
  #     - A
  #     - B

  # # Creazione del container Docker
  # - name: Create a data container
  #   docker_container:
  #     name: mydata
  #     image: busybox
  #     volumes:
  #       - /data
  #   # loop: "{{ range(0, vm_number + 1, 1)|list }}"
  #   loop:
  #     - A
  #     - B

  - debug:
      msg: "Public IP Address A: {{ pip_output.results[0].state.ip_address }}"

  - debug:
      msg: "Public IP Address B: {{ pip_output.results[1].state.ip_address }}"
